import { useState, useEffect, useRef } from 'react';
import { useLevelStore } from '../../store/levelStore';
import socketService from '../../services/socket';

/**
 * Hook para gerenciar a habilidade de invulnerabilidade (Tecla T)
 * Só funciona se a skill estiver desbloqueada na skill tree
 */
export function useInvulnerability() {
  const { bonuses } = useLevelStore();
  const [isInvulnerable, setIsInvulnerable] = useState(false);
  const [canUse, setCanUse] = useState(true);
  const [cooldownProgress, setCooldownProgress] = useState(0);

  const DURATION = 5000; // 5 segundos de invulnerabilidade
  const COOLDOWN = 30000; // 30 segundos de cooldown

  const cooldownIntervalRef = useRef(null);

  const activate = () => {
    // Verificar se tem a skill desbloqueada
    if (!bonuses.hasInvulnerability) {
      return false;
    }

    // Verificar se pode usar
    if (!canUse) {
      return false;
    }

    // Ativar invulnerabilidade
    setIsInvulnerable(true);
    setCanUse(false);

    // Notificar servidor sobre invulnerabilidade
    socketService.emit('activate_invulnerability', { duration: DURATION });

    // Desativar após duração
    setTimeout(() => {
      setIsInvulnerable(false);
    }, DURATION);

    // Iniciar cooldown
    const startTime = Date.now();
    cooldownIntervalRef.current = setInterval(() => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / COOLDOWN, 1);
      setCooldownProgress(progress);

      if (progress >= 1) {
        clearInterval(cooldownIntervalRef.current);
        setCanUse(true);
        setCooldownProgress(0);
      }
    }, 50);

    return true;
  };

  // Cleanup
  useEffect(() => {
    return () => {
      if (cooldownIntervalRef.current) {
        clearInterval(cooldownIntervalRef.current);
      }
    };
  }, []);

  return {
    isInvulnerable,
    canUse,
    cooldownProgress,
    activate,
    hasSkill: bonuses.hasInvulnerability,
  };
}
